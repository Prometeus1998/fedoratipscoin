---
name: "qt"
suites:
- "xenial"
architectures:
- "amd64"
packages: 
- "mingw-w64"
- "g++-mingw-w64"
- "git-core"
- "zip"
- "unzip"
- "faketime"
- "libz-dev"
- "psmisc"
- "bison"
- "gperf"
- "flex"
reference_datetime: "2018-02-01 00:00:00"
remotes: []
files:
- "qt-everywhere-src-5.10.0.tar.xz"
- "bitcoin-ssl-win64-gitian-r10.zip"
- "bitcoin-zib_png-win64-gitian-r10.zip"
script: |
  # Defines
  export TZ=UTC
  INDIR=$HOME/build
  TEMPDIR=$HOME/tmp
  export OLDPATH="$PATH"
  export OLDINCLUDE="$INCLUDE"
  export OLDLIB="$LIB"

  # Qt: workaround for determinism in resource ordering
  #  Qt5's rcc uses a QHash to store the files for the resource.
  #  A security fix in QHash makes the ordering of keys to be different on every run
  #  (https://qt.gitorious.org/qt/qtbase/commit/c01eaa438200edc9a3bbcd8ae1e8ded058bea268).
  #  This is good in general but qrc shouldn't be doing a traversal over a randomized container.
  #  The thorough solution would be to use QMap instead of QHash, but this requires patching Qt.
  #  For now luckily there is a test mode that forces a fixed seed.
  export QT_RCC_TEST=1

  # Integrity Check
  echo "936d4cf5d577298f4f9fdb220e85b008ae321554a5fcd38072dc327a7296230e  qt-everywhere-src-5.10.0.tar.xz" | sha256sum -c
  echo "23f277a558b471cb8e488f2801c5aad04004836310b6dab1e969ed6b3b9e5900  bitcoin-zib_png-win64-gitian-r10.zip" | sha256sum -c
  echo "17b2905f539180968019ae71b65812facd3c72a163934f829bfb879b7aacb993  bitcoin-ssl-win64-gitian-r10.zip" | sha256sum -c

  # 32
  for BITS in 64; do # for architectures
    #
    INSTALLPREFIX=$HOME/staging${BITS}
    BUILDDIR=$HOME/build${BITS}
    DEPSDIR=$HOME/deps${BITS}
    if [ "$BITS" == "32" ]; then
      HOST=i686-w64-mingw32
    else
      HOST=x86_64-w64-mingw32
    fi
    #
    export PATH="$DEPSDIR/lib:$OLDPATH"
    export INCLUDE="$DEPSDIR/include:$DEPSDIR/include/openssl:$OLDINCLUDE"
    export LIB="$DEPSDIR/lib:$OLDLIB"
    export PATH="$DEPSDIR/bin:$PATH"

    mkdir -p $INSTALLPREFIX $INSTALLPREFIX/host/bin $DEPSDIR $BUILDDIR
    #
    # Need mingw-compiled openssl from bitcoin-deps:
    cd $DEPSDIR
    unzip $INDIR/bitcoin-ssl-win64-gitian-r10.zip
    unzip $INDIR/bitcoin-zib_png-win64-gitian-r10.zip

    ln -sf $DEPSDIR/lib/libsicudt.a $DEPSDIR/lib/libicudt.a
    ln -sf $DEPSDIR/lib/libsicuin.a $DEPSDIR/lib/libicuin.a
    ln -sf $DEPSDIR/lib/libsicuio.a $DEPSDIR/lib/libicuio.a
    ln -sf $DEPSDIR/lib/libsicule.a $DEPSDIR/lib/libicule.a
    ln -sf $DEPSDIR/lib/libsiculx.a $DEPSDIR/lib/libiculx.a
    ln -sf $DEPSDIR/lib/libsicutest.a $DEPSDIR/lib/libicutest.a
    ln -sf $DEPSDIR/lib/libsicutu.a $DEPSDIR/lib/libicutu.a
    ln -sf $DEPSDIR/lib/libsicuuc.a $DEPSDIR/lib/libicuuc.a

    echo "Checking openssl headers location..."
    ls -al /home/ubuntu/deps64/include/openssl

    cd $BUILDDIR

    echo "uncompress qt-everywhere: the new tar recognizes the compression method: xf"
    tar xf $INDIR/qt-everywhere-src-5.10.0.tar.xz
    cd qt-everywhere-src-5.10.0
    QTDIR=$BUILDDIR/qt-everywhere-opensource-src-5.10.0

    echo "Working around bug in qt because they don't include a file, but equiv exists in linux..."
    ln -sf $DEPSDIR/qtwebengine/src/3rdparty/chromium/third_party/apple_apsl/malloc.h $DEPSDIR/include/alloca.h
    printf "#include <malloc.h>\n#include <fcntl.h>\n">$BUILDDIR/alloca.h
    cat $BUILDDIR/alloca.h

    SPECNAME="win32-g++"
    SPECPATH="qtbase/mkspecs/win32-g++"
    SPECFILE="$SPECPATH/qmake.conf"

    bison -V
    ls -al

    # echo "Building qmake ourselves so we can control which features it supports..."
    # yes|./configure -static -release -opensource -no-opengl

    ls -al
    echo "Fixing bug in qt for expected date format on windows..."
    sed 's/qt_instdate=`date +%Y-%m-%d`/qt_instdate=2018-02-01/' -i qtbase/configure

    CURTIMESTAMP=$(date +%s%N)
    echo "Timestamp in nanoseconds:"
    echo ${CURTIMESTAMP}

    # configuration flag insertion...
    sed --posix "s|QMAKE_CFLAGS            = -pipe -fno-keep-inline-dllexport|QMAKE_CFLAGS\t\t= -pipe -fno-keep-inline-dllexport -isystem /usr/$HOST/include/ -frandom-seed=${CURTIMESTAMP} -I$DEPSDIR/include|" -i ${SPECFILE}
    sed --posix "s|QMAKE_LFLAGS            =|QMAKE_LFLAGS\t\t= -L$DEPSDIR/lib|" -i ${SPECFILE}

    # Before we tried to pass arguments to ar (static linking) in using QMAKE_LIB, however
    #  qt removes the arguments for ar and provides a script which makes it impossible to pass the determinism flag -
    #  so rather than try to replace ar, post-process all libraries and plugins at the end.
    #
    # Don't load faketime while compiling Qt, qmake will get stuck in nearly infinite loops
    #export LD_PRELOAD=/usr/lib/faketime/libfaketime.so.1
    #export FAKETIME=$REFERENCE_DATETIME
 
    # Compile static libraries, and use statically linked openssl (-openssl-linked):

    CONFIG_OPTS="
    -prefix $INSTALLPREFIX
    -bindir ${INSTALLPREFIX}/host/bin
    -optimized-qmake
    -continue
    -make libs
    -opensource
    -accessibility
    -confirm-license
    -xplatform $SPECNAME
    -openssl
    -release
    -static
    -nomake examples
    -nomake tests
    -nomake tools
    -no-glib
    -no-dbus
    -no-cups
    -no-opengl
    -no-iconv
    -no-gif
    -no-freetype
    -no-pch
    -no-qml-debug
    -no-compile-examples
    -no-sql-ibase
    -no-sql-oci
    -no-sql-tds
    -no-sql-mysql
    -no-sql-odbc
    -no-sql-psql
    -no-sql-sqlite
    -no-sql-sqlite2
    -no-openvg
    -no-mtdev
    -no-kms
    -no-reduce-relocations
    -no-egl
    -no-eglfs
    -no-linuxfb
    -no-xinput2
    -no-libudev
    -skip qtwinextras
    -skip qtandroidextras
    -skip qtmacextras
    -skip qtx11extras
    -skip qtsvg
    -skip qtxmlpatterns
    -skip qtdeclarative
    -skip qtquickcontrols
    -skip qtactiveqt
    -skip qtlocation
    -skip qtsensors
    -skip qtconnectivity
    -skip qtwebsockets
    -skip qtwebchannel
    -skip qtimageformats
    -skip qtgraphicaleffects
    -skip qtscript
    -skip qtquick1
    -skip qtwayland
    -skip qtserialport
    -skip qtenginio
    -skip qtwebengine
    -skip qt3d
    -skip qtcanvas3d
    -skip qtspeech
    -skip qtdoc"

    #-system-libpng
    #-system-zlib"

    echo "Applying bugfixes for cross compiling to Windows... missing uiviewsettingsinterop header..."
    sed -i '/^ *# *define *HAS_UI_VIEW_SETTINGS_INTEROP *$/d' /home/ubuntu/build64/qt-everywhere-src-5.10.0/qtbase/src/plugins/platforms/windows/qwin10helpers.cpp

    sed -i 's/#  define WINVER 0x0601/ /g' /home/ubuntu/build64/qt-everywhere-src-5.10.0/qtbase/src/plugins/platforms/windows/qwindowssystemtrayicon.cpp
    sed -i 's/ChangeWindowMessageFilterEx(/\/\/ ChangeWindowMessageFilterEx(/g' /home/ubuntu/build64/qt-everywhere-src-5.10.0/qtbase/src/plugins/platforms/windows/qwindowssystemtrayicon.cpp

    sed -i '/option(host_build)/d' /home/ubuntu/build64/qt-everywhere-src-5.10.0/qtactiveqt/src/tools/idc/idc.pro
    sed -i '/# *if *defined *( *_WIN32_IE *) *&& *_WIN32_IE *<< *0x0700/{s,<<,<,}' /home/ubuntu/build64/qt-everywhere-src-5.10.0/qtwinextras/src/winextras/qwinjumplist.cpp

    export QT_DEBUG_PLUGINS=1
    OPENSSL_LIBS="-L $DEPSDIR/lib -lssl -lcrypto -lgdi32" 
    yes|./configure $CONFIG_OPTS -I $DEPSDIR/include -I $DEPSDIR/include/openssl -I $BUILDDIR -device-option CROSS_COMPILE="$HOST-"

    echo "making work-around for bug in cross compile of qt for windows on Linux..."
    ls -al /home/ubuntu/build64/qt-everywhere-src-5.10.0/qtbase/src/3rdparty/pcre2
    echo "QMAKE_LINK_OBJECT_MAX = 10" >> /home/ubuntu/build64/qt-everywhere-src-5.10.0/qtbase/mkspecs/win32-g++/qmake.conf
    echo "QMAKE_LINK_OBJECT_SCRIPT = object_script" >> /home/ubuntu/build64/qt-everywhere-src-5.10.0/qtbase/mkspecs/win32-g++/qmake.conf

    echo "printing out qmake.conf..."
    cat /home/ubuntu/build64/qt-everywhere-src-5.10.0/qtbase/mkspecs/win32-g++/qmake.conf

    echo "calling make..."
    make $MAKEOPTS
    echo "calling make install..."
    make $MAKEOPTS install

    echo "post-process all generated libraries and plugins to be deterministic..."
    echo "extract them to a temporary directory then re-build them deterministically..."
    for LIB in $(find $INSTALLPREFIX -name *.a && find $INSTALLPREFIX -name *.dll); do
        echo "Processing: "$LIB
        # next line is patch for qt bug that links release with debug libraries
        # sed -i 's,\(-lQt5[-_a-zA-Z0-9]*\)d,\1,g' "$LIB"
        rm -rf $TEMPDIR && mkdir $TEMPDIR && cd $TEMPDIR
        $HOST-ar xv $LIB | cut -b5- > /tmp/list.txt
        rm $LIB
        $HOST-ar crsD $LIB $(cat /tmp/list.txt)
    done
    ls -al
    #
    echo "moving to $INSTALLPREFIX..."
    cd $INSTALLPREFIX
    ls -al
    # Remove unused non-deterministic stuff
    rm host/bin/qtpaths.exe lib/libQt5Bootstrap.a lib/libQt5Bootstrap.la
    # as zip stores file timestamps, use faketime to intercept stat calls to set dates for all files to reference date
    export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1
    export FAKETIME=$REFERENCE_DATETIME
    find -print0 | xargs -r0 touch # fix up timestamps before packaging
    find | sort | zip -X@ $OUTDIR/qt-win${BITS}-5.10.0-gitian-r2.zip
    unset LD_PRELOAD
    unset FAKETIME
  done # for BITS in
