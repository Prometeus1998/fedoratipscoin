---
name: "boost"
suites:
- "xenial"
architectures:
- "amd64"
packages:
- "g++"
- "faketime"
- "zip"
reference_datetime: "2011-01-30 00:00:00"
remotes: []
files:
- "boost_1_60_0.tar.bz2"
script: |
  # Defines
  export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1
  export FAKETIME=$REFERENCE_DATETIME
  export TZ=UTC
  INDIR=$HOME/build
  TEMPDIR=$HOME/tmp
  # Input Integrity Check
  echo "686affff989ac2488f79a97b9479efb9f2abae035b5ed4d8226de6857933fd3b  boost_1_60_0.tar.bz2" | shasum -c

  # 32
  for BITS in 64; do # for architectures
    #
    INSTALLPREFIX=$HOME/staging${BITS}
    BUILDDIR=$HOME/build${BITS}
    HOST=x86_64-linux-gnu
    #
    mkdir -p $INSTALLPREFIX $BUILDDIR
    cd $BUILDDIR
    #
    CURTIMESTAMP=$(date +%s%N)
    echo "Timestamp in nanoseconds:"
    echo ${CURTIMESTAMP}

    tar --warning=no-timestamp -xjf $INDIR/boost_1_60_0.tar.bz2
    cd boost_1_60_0
    GCCVERSION=$(g++ -E -dM $(mktemp --suffix=.h) | grep __VERSION__ | cut -d ' ' -f 3 | cut -d '"' -f 2)
    echo "using gcc : $GCCVERSION : g++
        :
        <cxxflags>\"-frandom-seed=boost1 -fPIC\"
        ;" > user-config.jam

    ./bootstrap.sh --without-icu

    # Workaround: Upstream boost dev refuses to include patch that would allow Free Software cross-compile toolchain to work
    #             This patch was authored by the Fedora package developer and ships in Fedora's mingw32-boost.
    #             Please obtain the exact patch that matches the above sha256sum from one of the following mirrors.
    #
    # Read History:   https://svn.boost.org/trac/boost/ticket/7262
    # History Mirror: http://rose.makesad.us/~paulproteus/mirrors/7262%20Boost.Context%20fails%20to%20build%20using%20MinGW.html
    #
    # Patch:          https://svn.boost.org/trac/boost/raw-attachment/ticket/7262/boost-mingw.patch
    # Patch Mirror:   http://wtogami.fedorapeople.org/boost-mingw-gas-cross-compile-2013-03-03.patch
    # Patch Mirror:   http://mindstalk.net/host/boost-mingw-gas-cross-compile-2013-03-03.patch
    # Patch Mirror:   http://rose.makesad.us/~paulproteus/mirrors/boost-mingw-gas-cross-compile-2013-03-03.patch
    # appears to be obsolete now
    #    patch -p0 < $INDIR/boost-mingw-gas-cross-compile-2013-03-03.patch
    # Bug Workaround: boost-1.54.0 broke the ability to disable zlib, still broken in 1.60
    # https://svn.boost.org/trac/boost/ticket/9156
    sed -i 's^\[ ac.check-library /zlib//zlib : <library>/zlib//zlib^^' libs/iostreams/build/Jamfile.v2
    sed -i 's^<source>zlib.cpp <source>gzip.cpp \]^^' libs/iostreams/build/Jamfile.v2


    sed 's/private:/protected:/' -i boost/thread/pthread/condition_variable_fwd.hpp
    cat boost/thread/pthread/condition_variable_fwd.hpp


    # at http://statmt.org/~s0565741/software/boost_1_52_0/libs/context/doc/html/context/requirements.html
    # "For cross-compiling the lib you must specify certain additional properties at bjam command line: target-os, abi, binary-format, architecture and address-model."
    # ... but if you look in the boost 1.60 code you find
    # this... so, if the syntax of the command line doesn't fulfill all of these
    #   attributes it will fail (these are now mandatory and we were missing architecture and abi):
    #
    # at bjam command line: 
    #   <code><phrase role="identifier">target</phrase>
    #         <phrase role="special">-</phrase>
    #         <phrase role="identifier">os</phrase>
    #   </code>, 
    #   <code><phrase role="identifier">abi</phrase></code>, 
    #   <code><phrase role="identifier">binary</phrase>
    #         <phrase role="special">-</phrase>
    #         <phrase role="identifier">format</phrase>
    #   </code>,
    #   <code><phrase role="identifier">architecture</phrase></code> and 
    #   <code><phrase role="identifier">address</phrase>
    #         <phrase role="special">-</phrase>
    #         <phrase role="identifier">model</phrase>
    #   </code>.

    # echo "show which libraries are available to build..."
    # ./bjam --show-libraries
    # THESE ARE THE LIBRARIES YOU CAN BUILD WITH THE --with-NAME command below...
    # - atomic
    # - chrono
    # - container
    # - context
    # - coroutine
    # - coroutine2
    # - date_time
    # - exception
    # - filesystem
    # - graph
    # - graph_parallel
    # - iostreams
    # - locale
    # - log
    # - math
    # - mpi
    # - program_options
    # - python
    # - random
    # - regex
    # - serialization
    # - signals
    # - system
    # - test
    # - thread
    # - timer
    # - type_erasure
    # - wave

    # should be upgraded to use b2 instead --without-python
    echo "building now..."
    ./bjam toolset=gcc threadapi=pthread threading=multi variant=release link=static runtime-link=static --with-atomic --with-system --with-filesystem --with-thread --with-program_options --with-chrono --user-config=user-config.jam -sNO_BZIP2=1 -sNO_ZLIB=1 --layout=tagged --build-type=complete --prefix="$INSTALLPREFIX" $MAKEOPTS install

    #./bjam toolset=gcc threadapi=pthread threading=multi variant=release link=static runtime-link=shared --user-config=user-config.jam --without-mpi --without-python -sNO_BZIP2=1 --layout=tagged --build-type=complete --prefix="$STAGING" $MAKEOPTS -d+2 install

    # post-process all generated libraries to be deterministic
    # extract them to a temporary directory then re-build them deterministically
    for LIB in $(find $INSTALLPREFIX -name \*.a); do
        rm -rf $TEMPDIR && mkdir $TEMPDIR && cd $TEMPDIR
        $HOST-ar xv $LIB | cut -b5- > /tmp/list.txt
        rm $LIB
        $HOST-ar crsD $LIB $(cat /tmp/list.txt)
    done
    #
    cd "$INSTALLPREFIX"
    find | sort | zip -X@ $OUTDIR/boost-linux$BITS-1.60.0-gitian-r6.zip
  done # for BITS in

