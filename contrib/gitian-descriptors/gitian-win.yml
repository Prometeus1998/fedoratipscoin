---
name: "bitcoin"
suites:
- "xenial"
architectures:
- "amd64"
packages:
- "mingw-w64"
- "g++-mingw-w64"
- "git-core"
- "unzip"
- "nsis"
- "faketime"
- "autoconf2.13"
- "libtool"
- "automake"
- "pkg-config"
- "bsdmainutils"

reference_datetime: "2018-02-01 00:00:00"
remotes:
- "url": "https://github.com/jojapoppa/fedoracoin-1.git"
  "dir": "bitcoin"
files:
- "qt-win64-5.10.0-gitian-r2.zip"
- "boost-win64-1.60.0-gitian-r6.zip"
- "protobuf-win64-2.5.0-gitian-r4.zip"
- "bitcoin-db-win64-gitian-r10.zip"
- "bitcoin-qrencode-win64-gitian-r10.zip"
- "bitcoin-ssl-win64-gitian-r10.zip"
- "bitcoin-upnp-win64-gitian-r10.zip"
- "bitcoin-zib_png-win64-gitian-r10.zip"
- "libleveldb.a"
- "libmemenv.a"
script: |
  # Defines
  export TZ=UTC
  INDIR=$HOME/build
  OPTFLAGS='-O2'
  TEMPDIR="$HOME/tempdir"

  CURTIMESTAMP=$(date +%s%N)
  echo "Timestamp in nanoseconds:"
  echo ${CURTIMESTAMP}

  NEEDDIST=1
  # Qt: workaround for determinism in resource ordering
  #  Qt5's rcc uses a QHash to store the files for the resource.
  #  A security fix in QHash makes the ordering of keys to be different on every run
  #  (https://qt.gitorious.org/qt/qtbase/commit/c01eaa438200edc9a3bbcd8ae1e8ded058bea268).
  #  This is good in general but qrc shouldn't be doing a traversal over a randomized container.
  #  The thorough solution would be to use QMap instead of QHash, but this requires patching Qt.
  #  For now luckily there is a test mode that forces a fixed seed.
  export QT_RCC_TEST=1
  for BITS in 64; do # for architectures
    #
    STAGING=$HOME/staging${BITS}
    BUILDDIR=$HOME/build${BITS}
    BINDIR=$OUTDIR/$BITS
    if [ "$BITS" == "32" ]; then
      HOST=i686-w64-mingw32
    else
      HOST=x86_64-w64-mingw32
    fi
    export PATH=$STAGING/host/bin:$PATH
    mkdir -p $STAGING $BUILDDIR $BINDIR
    #
    cd $STAGING
    cp $INDIR/libleveldb.a ./lib
    cp $INDIR/libmemenv.a ./lib
    unzip -o $INDIR/qt-win${BITS}-5.10.0-gitian-r2.zip
    unzip -o $INDIR/boost-win${BITS}-1.60.0-gitian-r6.zip
    unzip -o $INDIR/protobuf-win${BITS}-2.5.0-gitian-r4.zip
    unzip -o $INDIR/bitcoin-db-win${BITS}-gitian-r10.zip
    unzip -o $INDIR/bitcoin-qrencode-win${BITS}-gitian-r10.zip
    unzip -o $INDIR/bitcoin-ssl-win${BITS}-gitian-r10.zip
    unzip -o $INDIR/bitcoin-upnp-win${BITS}-gitian-r10.zip
    unzip -o $INDIR/bitcoin-zib_png-win${BITS}-gitian-r10.zip

    echo "show what utilities are available..."
    ls -al $STAGING/host/bin

    if [ "$NEEDDIST" == "1" ]; then
      # Make source code archive which is architecture independent so it only needs to be done once
      cd $HOME/build/bitcoin
      ./autogen.sh
      ./configure --bindir=$OUTDIR --prefix=$STAGING --host=$HOST --with-incompatible-bdb --with-qt-plugindir=$STAGING/plugins  --with-qt-incdir=$STAGING/include --with-qt-bindir=$STAGING/host/bin --with-boost=$STAGING --disable-maintainer-mode --with-protoc-bindir=$STAGING/host/bin --disable-dependency-tracking CPPFLAGS="-I$STAGING/include ${OPTFLAGS}" LDFLAGS="-L$STAGING/lib ${OPTFLAGS}" CXXFLAGS="-frandom-seed=${CURTIMESTAMP} ${OPTFLAGS}"
      make dist
      DISTNAME=`echo fedoracoin-*.tar.gz`
      echo "showing distribution created in $HOME/build/bitcoin..."
      ls -al $HOME/build/bitcoin
      NEEDDIST=0
    fi

    echo "Build platform-dependent executables from source archive..."
    cd $BUILDDIR
    mkdir -p distsrc
    cd distsrc
    tar --strip-components=1 -xf $HOME/build/bitcoin/$DISTNAME
    ls -al

    echo "Calling moc..."
    moc -v
    cd src/qt
    moc -o bitcoin.moc bitcoingui.h
    moc -o intro.moc intro.h
    moc -o overviewpage.moc overviewpage.h
    moc -o rpcconsole.moc rpcconsole.h
    cd ../..

    INCPATHS="-I $STAGING -I $STAGING/include -I $STAGING/include/QtCore -I $STAGING/include/QtGui -I $STAGING/include/QtWidgets"

    ./configure --disable-tests --enable-upnp-default --bindir=$BINDIR --prefix=$STAGING --host=$HOST --with-incompatible-bdb --with-qt-plugindir=$STAGING/plugins  --with-qt-incdir=$STAGING/include --with-qt-bindir=$STAGING/host/bin --with-boost=$STAGING --disable-maintainer-mode --with-protoc-bindir=$STAGING/host/bin --disable-dependency-tracking CPPFLAGS="${INCPATHS} ${OPTFLAGS}" LDFLAGS="-L$STAGING/lib ${OPTFLAGS}" CXXFLAGS="-frandom-seed={CURTIMESTAMP} -std=c++11 ${OPTFLAGS}"
    export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1
    export FAKETIME=$REFERENCE_DATETIME

    echo "regenerating langage qm files..."
    $STAGING/host/bin/lrelease src/fedoracoin-qt.pro

    echo "staging include and lib dirs..."
    ls -al $STAGING/include
    ls -al $STAGING/lib

    echo "adding additional default parameter for new version of upnpc..."
    sed -i 's/devlist = upnpDiscover(2000, multicastif, minissdpdpath, 0, 0,/devlist = upnpDiscover(2000, multicastif, minissdpdpath, 0, 0, 0,/' /home/ubuntu/build64/distsrc/src/net.cpp

    echo "Calling make for main src folder..."
    make $MAKEOPTS

    echo "calling protoc..."
    ls -al /home/ubuntu/build64/distsrc
    ls -al /home/ubuntu/build64/distsrc/src/qt
    $STAGING/host/bin/protoc --version
    $STAGING/host/bin/protoc --cpp_out=/home/ubuntu/build64/distsrc/src/qt --proto_path=/home/ubuntu/build64/distsrc/src/qt /home/ubuntu/build64/distsrc/src/qt/paymentrequest.proto

    make deploy
    make install-strip
    cp -f fedoracoin-*setup*.exe $BINDIR/
    unset LD_PRELOAD
    unset FAKETIME
  done # for BITS in
  # sort distribution tar file and normalize user/group/mtime information for deterministic output
  mkdir -p $OUTDIR/src
  rm -rf $TEMPDIR
  mkdir -p $TEMPDIR
  cd $TEMPDIR
  tar --preserve-permissions -xvf $HOME/build/bitcoin/$DISTNAME | sort | tar --no-recursion -cT /dev/stdin --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 --mtime="$REFERENCE_DATETIME" | gzip -n > $OUTDIR/src/$DISTNAME

