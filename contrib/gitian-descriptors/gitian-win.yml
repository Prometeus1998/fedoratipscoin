---
name: "bitcoin"
enable_cache: false
suites:
- "xenial"
architectures:
- "amd64"
packages:
- "qt5-qmake"
- "mingw-w64"
- "g++-mingw-w64"
- "gcc-mingw-w64"
- "git-core"
- "zip"
- "unzip"
- "nsis"
- "cmake"
- "faketime"
- "autoconf2.13"
- "libtool"
- "automake"
- "pkg-config"
- "bsdmainutils"
reference_datetime: "2018-02-01 00:00:00"
remotes:
- "url": "https://github.com/jojapoppa/fedoratipscoin.git"
  "dir": "bitcoin_win"
files:
- "qt-win64-5.10.0-gitian-r2.zip"
- "boost-win64-1.60.0-gitian-r6.zip"
- "protobuf-win64-2.5.0-gitian-r4.zip"
- "bitcoin-db-win64-gitian-r10.zip"
- "bitcoin-qrencode-win64-gitian-r10.zip"
- "bitcoin-upnp-win64-gitian-r10.zip"
- "bitcoin-zib_png-win64-gitian-r10.zip"
- "bitcoin-ssl-win64-gitian-r10.zip"
- "openssl-1.0.2n-x64_86-win64.zip"
- "zxing-master.zip"
script: |
  # Defines
  export TZ=UTC
  INDIR=$HOME/build
  OPTFLAGS='-O2'
  TEMPDIR="$HOME/tempdir"

  CURTIMESTAMP=$(date +%s%N)
  echo "Timestamp in nanoseconds:"
  echo $CURTIMESTAMP

  NEEDDIST=1
  # Qt: workaround for determinism in resource ordering
  #  Qt5's rcc uses a QHash to store the files for the resource.
  #  A security fix in QHash makes the ordering of keys to be different on every run
  #  (https://qt.gitorious.org/qt/qtbase/commit/c01eaa438200edc9a3bbcd8ae1e8ded058bea268).
  #  This is good in general but qrc shouldn't be doing a traversal over a randomized container.
  #  The thorough solution would be to use QMap instead of QHash, but this requires patching Qt.
  #  For now luckily there is a test mode that forces a fixed seed.
  export QT_RCC_TEST=1
  for BITS in 64; do # for architectures
    #
    STAGING=$HOME/staging${BITS}
    BUILDDIR=$HOME/build${BITS}
    BINDIR=$OUTDIR/$BITS
    if [ "$BITS" == "32" ]; then
      HOST=i686-w64-mingw32
    else
      HOST=x86_64-w64-mingw32
    fi
    export PATH=$STAGING/host/bin:$PATH
    mkdir -p $STAGING $BUILDDIR $BINDIR
    #
    cd $STAGING
    unzip -o $INDIR/qt-win${BITS}-5.10.0-gitian-r2.zip
    unzip -o $INDIR/boost-win${BITS}-1.60.0-gitian-r6.zip
    unzip -o $INDIR/protobuf-win${BITS}-2.5.0-gitian-r4.zip
    unzip -o $INDIR/bitcoin-db-win${BITS}-gitian-r10.zip
    unzip -o $INDIR/bitcoin-qrencode-win${BITS}-gitian-r10.zip
    unzip -o $INDIR/bitcoin-ssl-win${BITS}-gitian-r10.zip
    unzip -o $INDIR/bitcoin-upnp-win${BITS}-gitian-r10.zip
    unzip -o $INDIR/bitcoin-zib_png-win${BITS}-gitian-r10.zip

    echo "unzipping prebuilt ssl dlls, may want to build these too eventually... TBD..."
    unzip -o $INDIR/openssl-1.0.2n-x64_86-win64.zip

    echo "move libs to libs folder as qmake can't locate them otherwise..."
    mv $STAGING/plugins/bearer/* $STAGING/lib
    mv $STAGING/plugins/gamepads/* $STAGING/lib
    mv $STAGING/plugins/generic/* $STAGING/lib
    mv $STAGING/plugins/imageformats/* $STAGING/lib
    mv $STAGING/plugins/printsupport/* $STAGING/lib
    mv $STAGING/plugins/styles/* $STAGING/lib
    mv $STAGING/plugins/platforms/* $STAGING/lib
    ls -al $STAGING/lib

    echo "Must now build the zxing library now (used for qrcodes)..."
    cd $STAGING/include
    mkdir zxing
    cd zxing
    unzip -o $INDIR/zxing-master.zip
    cd zxing-cpp-master
    ls -al
    mkdir build
    cd build
    export CXXFLAGS="-fPIC"
    cmake -G "Unix Makefiles" -DCMAKE_CXX_FLAGS=-D_GLIBCXX_USE_CXX11_ABI=0 -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_BUILD_TYPE=Release ..
    make
    ls -al $STAGING/include/zxing/zxing-cpp-master/build
    cp $STAGING/include/zxing/zxing-cpp-master/core/src/zxing/ZXing.h $STAGING/include/zxing.h
    mv $STAGING/include/zxing/zxing-cpp-master/build/libzxing.a $STAGING/lib
    mv $STAGING/include/zxing/zxing-cpp-master/core/src/win32/zxing/* $STAGING/lib
    mv $STAGING/include/zxing/zxing-cpp-master/core/src/zxing/* $STAGING/include/zxing
    echo "zxing in include dir..."
    ls -al $STAGING/include/zxing

    echo $STAGING/include
    ls -al $STAGING/include

    echo "show what utilities are available..."
    ls -al $STAGING/host/bin

    echo "Bundle up a distribution internally with all the source in it..."
    if [ "$NEEDDIST" == "1" ]; then
      # Make source code archive which is architecture independent so it only needs to be done once
      cd $HOME/build/bitcoin_win
      ./autogen.sh
      ./configure --disable-tests --enable-upnp-default --bindir=$OUTDIR --prefix=$STAGING --host=$HOST --with-incompatible-bdb --with-qt-plugindir=$STAGING  --with-qt-incdir=$STAGING/include --with-qt-libdir=$STAGING/lib --with-qt-bindir=$STAGING/host/bin --with-boost=$STAGING --disable-maintainer-mode --with-protoc-bindir=$STAGING/host/bin --disable-dependency-tracking CPPFLAGS="-I $STAGING/include $OPTFLAGS" LDFLAGS="-static -L$STAGING/lib -lpthread $OPTFLAGS" CXXFLAGS="-frandom-seed=$CURTIMESTAMP -std=c++11 $OPTFLAGS"
      echo "Print out configure config.log file..."
      cat config.log
      echo "building leveldb..."
      cd src/leveldb
      make
      # TARGET_OS=NATIVE_WINDOWS make libleveldb.a libmemenv.a
      cp libleveldb.a $STAGING/lib
      cp libmemenv.a $STAGING/lib
      cd ..
      cd ..

      echo "Making dist of code for coin..."
      make dist
      DISTNAME=`echo fedoracoin-*.tar.gz`
      echo "showing distribution created in $HOME/build/bitcoin_win..."
      ls -al $HOME/build/bitcoin_win
      NEEDDIST=0
    fi

    echo "Build platform-dependent executables from source archive..."
    cd $BUILDDIR
    mkdir -p distsrc
    cd distsrc
    tar --strip-components=1 -xf $HOME/build/bitcoin_win/$DISTNAME
    ls -al

    cd src
    cd qt

    echo "moc version..."
    moc -v

    echo "Calling uic to convert form files into header files..."
    uic -v
    uic -o ui_aboutdialog.h forms/aboutdialog.ui
    uic -o ui_debugdialog.h forms/debugdialog.ui
    uic -o ui_optionsdialog.h forms/optionsdialog.ui
    uic -o ui_sendcoinsdialog.h forms/sendcoinsdialog.ui
    uic -o ui_addressbookpage.h forms/addressbookpage.ui
    uic -o ui_editaddressdialog.h forms/editaddressdialog.ui
    uic -o ui_overviewpage.h forms/overviewpage.ui
    uic -o ui_sendcoinsentry.h forms/sendcoinsentry.ui
    uic -o ui_askpassphrasedialog.h forms/askpassphrasedialog.ui
    uic -o ui_helpmessagedialog.h forms/helpmessagedialog.ui
    uic -o ui_paperwalletdialog.h forms/paperwalletdialog.ui
    uic -o ui_shiftdialog.h forms/shiftdialog.ui
    uic -o ui_coincontroldialog.h forms/coincontroldialog.ui
    uic -o ui_intro.h forms/intro.ui
    uic -o ui_qrcodedialog.h forms/qrcodedialog.ui
    uic -o ui_signverifymessagedialog.h forms/signverifymessagedialog.ui
    uic -o ui_coinnectordialog.h forms/coinnectordialog.ui
    uic -o ui_multisigdialog.h forms/multisigdialog.ui
    uic -o ui_receivecoinsdialog.h forms/receivecoinsdialog.ui
    uic -o ui_snapwidget.h forms/snapwidget.ui
    uic -o ui_commentdialog.h forms/commentdialog.ui
    uic -o ui_opennamedialog.h forms/opennamedialog.ui
    uic -o ui_receiverequestdialog.h forms/receiverequestdialog.ui
    uic -o ui_transactiondescdialog.h forms/transactiondescdialog.ui
    uic -o ui_createmultisigaddrdialog.h forms/createmultisigaddrdialog.ui
    uic -o ui_openuridialog.h forms/openuridialog.ui
    uic -o ui_rpcconsole.h forms/rpcconsole.ui

    # echo "Calling moc... must build some explicitly due to forward references"
    moc -o bitcoinamountfield.moc bitcoinamountfield.cpp
    # moc -o bitcoin.moc bitcoin.cpp
    # moc -o bitcoingui.moc bitcoingui.h
    # moc -o intro.moc intro.h
    # moc -o overviewpage.moc overviewpage.h
    # moc -o rpcconsole.moc rpcconsole.h

    cd ..
    cd ..

    which ld
    ld -V

    echo "regenerating langage qm files..."
    $STAGING/host/bin/lrelease src/fedoracoin-qt.pro

    echo "staging include and lib dirs..."
    ls -al $STAGING/include
    ls -al $STAGING/lib

    echo "adding additional default parameter for new version of upnpc..."
    sed -i 's/devlist = upnpDiscover(2000, multicastif, minissdpdpath, 0, 0,/devlist = upnpDiscover(2000, multicastif, minissdpdpath, 0, 0, 0,/' /home/ubuntu/build64/distsrc/src/net.cpp

    echo "calling protoc..."
    ls -al /home/ubuntu/build64/distsrc
    ls -al /home/ubuntu/build64/distsrc/src/qt
    $STAGING/host/bin/protoc --version
    $STAGING/host/bin/protoc --cpp_out=/home/ubuntu/build64/distsrc/src/qt --proto_path=/home/ubuntu/build64/distsrc/src/qt /home/ubuntu/build64/distsrc/src/qt/paymentrequest.proto

    echo "what is in the lib folder?..."
    ls -al $STAGING/lib

    export DEBUG_LOCKCONTENTION=1

    echo "adding paths of all the QT code to the include..."
    export CPLUS_INCLUDE_PATH="$STAGING/include;$STAGING/include/boost;$STAGING/include/google;$STAGING/include/libpng16;$STAGING/include/miniupnpc;$STAGING/include/openssl;$STAGING/include/QtAccessibilitySupport;$STAGING/include/QtCharts;$STAGING/include/QtConcurrent;$STAGING/include/QtCore;$STAGING/include/QtDeviceDiscoverySupport;$STAGING/include/QtEdidSupport;$STAGING/include/QtEventDispatcherSupport;$STAGING/include/QtFbSupport;$STAGING/include/QtFontDatabaseSupport;$STAGING/include/QtGamepad;$STAGING/include/QtGui;$STAGING/include/QtHelp;$STAGING/include/QtNetwork;$STAGING/include/QtNetworkAuth;$STAGING/include/QtPlatformHeaders;$STAGING/include/QtPrintSupport;$STAGING/include/QtRemoteObjects;$STAGING/include/QtRepParser;$STAGING/include/QtSql;$STAGING/include/QtTest;$STAGING/include/QtThemeSupport;$STAGING/include/QtMultimedia;$STAGING/include/QtMultimediaWidgets;$STAGING/include/QtUiPlugin;$STAGING/include/QtUiTools;$STAGING/include/QtWidgets;$STAGING/include/QtXml;$STAGING/include/QtZlib;$STAGING/zxing/zxing-cpp-master/core/src/zxing;$STAGING/zxing/zxing-cpp-master/core/src/win32/zxing;$STAGING/zxing/zxing-cpp-master/core/src;$STAGING/zxing/zxing-cpp-master/core/src/zxing/common"

    export LIBS="$LIBS -L$STAGING/lib -lqtpcre2 -lleveldb -lmemenv -lQt5Charts -lQt5Concurrent -lQt5DeviceDiscoverySupport -lQt5EdidSupport -lQt5EventDispatcherSupport -lQt5FbSupport -lQt5Gamepad -lQt5Gui -lQt5Help -lQt5Network -lQt5NetworkAuth -lQt5RemoteObjects -lQt5Sql -lQt5UiTools -lQt5Widgets -lQt5Xml -lqtharfbuzz -lqtmain -lboost_chrono-mt-s -lboost_program_options-mt-s -lboost_system-mt-s -lboost_thread_win32-mt-s -lboost_timer-mt-s -lprotobuf -lprotoc -lqrencode -lcrypto -lssl -lminiupnpc -lpng16 -lpng -lQt5AccessibilitySupport -lz -lzxing -lqico -lqjpeg -lqtuiotouchplugin -lxinputgamepad -lqgenericbearer -lqnativewifibearer -ldb -ldb_cxx -lqtlibpng -ldb-5.3 -ldb_cxx-5.3 -lboost_prg_exec_monitor-mt-s -lprotobuf-lite -L/usr/x86_64-w64-mingw32/lib -lcomdlg32 -lcomctl32 -lshell32 -luuid -lwinmm -lversion -lqminimal -lqwindows -lqwindowsvistastyle -lwindowsprintersupport -lwinspool -lole32 -lquartz -lkernel32 -lQt5Core -lQt5ThemeSupport -lQt5FontDatabaseSupport -lQt5PrintSupport -lQt5EventDispatcherSupport -lQt5Gui -lQt5Multimedia -lQt5MultimediaWidgets -lboost_filesystem-mt-s -lpthread -lgdi32 -loleaut32 -limm32 -luserenv -lnetapi32 -ldwmapi -lwinmm -lQt5AccessibilitySupport -lQt5Widgets -Wl,--start-group -lQt5Multimedia -lQt5MultimediaWidgets -Wl,--end-group"

    echo "Calling configure now..."
    ./configure --disable-tests --enable-upnp-default --bindir=$BINDIR --prefix=$STAGING --host=$HOST --with-incompatible-bdb --with-qt-plugindir=$STAGING --with-qt-incdir=$STAGING/include --with-qt-libdir=$STAGING/lib --with-qt-bindir=$STAGING/host/bin --with-boost=$STAGING --disable-maintainer-mode --with-protoc-bindir=$STAGING/host/bin --disable-dependency-tracking CPPFLAGS="-D_GLIBCXX_HAVE_AT_QUICK_EXIT=1 -I$STAGING/include ${OPTFLAGS}" LDFLAGS="-L/usr/x86_64-w64-mingw32/lib -L$STAGING/lib -static -Wl,-V -Wl,-M -Wl,--cref -Wl,-t -Wl,--no-keep-memory -Wl,--stats -Wl,--verbose ${OPTFLAGS}" CXXFLAGS="-frandom-seed=$CURTIMESTAMP -std=c++11 -static-libgcc -static-libstdc++ ${OPTFLAGS}"

    echo "Print out configure config.log file..."
    cat config.log

    echo "set up faketime..."
    export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1
    export FAKETIME=$REFERENCE_DATETIME
    export DYLD_PRINT_LIBRARIES=1
    export QT_DEBUG_PLUGINS=1

    echo "staging include and lib dirs..."
    ls -al $STAGING/include
    ls -al $STAGING/lib

    echo "Calling make for main src folder..."
    make $MAKEOPTS

    echo "make deploy..."
    make deploy
    echo "make install-strip..."
    make install-strip
    echo "makes completed..."

    cd release
    pwd
    cp $STAGING/*.dll .
    ls -al
    find | sort | zip -X@ $OUTDIR/fedoracoin.zip
    makensis ../share/setup.nsi
    cp -f /home/ubuntu/build64/distsrc/fedoracoin-2.5.1-win64-setup.exe $OUTDIR/

    unset LD_PRELOAD
    unset FAKETIME
  done # for BITS in

