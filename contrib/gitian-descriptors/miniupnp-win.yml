---
name: "bitcoin-upnp"
suites:
- "xenial"
architectures:
- "amd64"
packages:
- "mingw-w64"
- "g++-mingw-w64"
- "git-core"
- "zip"
- "faketime"
- "psmisc"
reference_datetime: "2018-02-02 00:00:00"
remotes: []
files:
- "miniupnpc-2.0.tar.gz"
script: |
  #
  export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1
  export FAKETIME=$REFERENCE_DATETIME
  export TZ=UTC
  INDIR=$HOME/build
  TEMPDIR=$HOME/tmp
  # Input Integrity Check
  echo "cef135ae46c12358a485e809619c01145238aceb10e6e8e2946ae40c4dbe477d  miniupnpc-2.0.tar.gz" | sha256sum -c

  # 32
  for BITS in 64; do # for architectures
    #
    INSTALLPREFIX=$HOME/staging${BITS}
    BUILDDIR=$HOME/build${BITS}
    if [ "$BITS" == "32" ]; then
      HOST=i686-w64-mingw32
    else
      HOST=x86_64-w64-mingw32
    fi
    #
    mkdir -p $INSTALLPREFIX $BUILDDIR
    cd $BUILDDIR
    #
    tar xzf $INDIR/miniupnpc-2.0.tar.gz
    cd miniupnpc-2.0.20171212

    # Alert!
    # this code is required with the plugin interface for service discovery.  trouble is
    # that on xenial i can't even get it to compile any more.  part of me really doesn't
    # like this patch embedded in a script, as it's impossible to debug as there is
    # no output visible on the outside of vagrant.  it's a very messy code patch. in
    # any event we need to see if the new version of "patch" changed parameter interpretation
    # or maybe the syntax of the patch is no longer compatible.  but i just can't get
    # this "thing" to compile, so i'm commenting it out, and it's likely that
    # the plugin service-discovery in the wallet won't be functional over the
    # short term.  NOTE: we need to return to this issue and repair it... perhaps
    # we could try a diff against the current bitcoin-core and see how they fixed it. tx -Poppa
    #
    #    echo "
    #  --- miniupnpc-2.0.20171212/Makefile.mingw.orig   2013-09-29 18:52:51.014087958 -1000
    #  +++ miniupnpc-2.0.20171212/Makefile.mingw        2013-09-29 19:09:29.663318691 -1000
    #  @@ -74,8 +74,8 @@
    #   
    #   wingenminiupnpcstrings.o:	wingenminiupnpcstrings.c
    #   
    #  -miniupnpcstrings.h: miniupnpcstrings.h.in wingenminiupnpcstrings
    #  -	wingenminiupnpcstrings \$< \$@
    #  +miniupnpcstrings.h: miniupnpcstrings.h.in 
    #  +	sed -e 's|OS/version|MSWindows/5.1.2600|' -e 's|MINIUPNPC_VERSION_STRING \"version\"|MINIUPNPC_VERSION_STRING \"VERSIONHERE\"|' \$< > \$@
    #   
    #   minixml.o:	minixml.c minixml.h miniupnpcstrings.h
    #   
    #  " | sed "s/VERSIONHERE/$(cat VERSION)/" | patch -p1

    mkdir -p dll
    make -w -t -f Makefile.mingw CC=$HOST-gcc AR=$HOST-ar libminiupnpc.a
    install -d $INSTALLPREFIX/include/miniupnpc
    install *.h $INSTALLPREFIX/include/miniupnpc
    install libminiupnpc.a  $INSTALLPREFIX/lib
    cd ..
    #
    # post-process all generated libraries to be deterministic
    # extract them to a temporary directory then re-build them deterministically
    for LIB in $(find $INSTALLPREFIX -name \*.a); do
        rm -rf $TEMPDIR && mkdir $TEMPDIR && cd $TEMPDIR
        $HOST-ar xv $LIB | cut -b5- > /tmp/list.txt
        rm $LIB
        $HOST-ar crsD $LIB $(cat /tmp/list.txt)
    done
    #
    cd $INSTALLPREFIX
    find include lib | sort | zip -X@ $OUTDIR/bitcoin-upnp-win$BITS-gitian-r10.zip
  done # for BITS in
